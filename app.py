{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5f2fa67c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask,render_template,url_for,request\n",
    "import pandas as pd \n",
    "import pickle\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "import joblib\n",
    "import re, string\n",
    "import emoji\n",
    "import nltk\n",
    "from nltk.stem import WordNetLemmatizer,PorterStemmer\n",
    "from nltk.corpus import stopwords\n",
    "ps = PorterStemmer() #Stemming is working better in our case\n",
    "\n",
    "#Text cleaning\n",
    "import re, string\n",
    "import emoji\n",
    "import nltk\n",
    "from nltk.stem import WordNetLemmatizer,PorterStemmer\n",
    "from nltk.corpus import stopwords\n",
    "stop_words = set(stopwords.words('english'))\n",
    "import demoji\n",
    "\n",
    "#Data preprocessing\n",
    "from sklearn import preprocessing\n",
    "from sklearn.model_selection import train_test_split\n",
    "#from imblearn.over_sampling import RandomOverSampler\n",
    "\n",
    "#Machine learning models\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "\n",
    "\n",
    "\n",
    "#Seed for reproducibility\n",
    "seed=42\n",
    "\n",
    "%matplotlib inline\n",
    "app = Flask(__name__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ec78d3c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_text(text):\n",
    "     # Remove Hashtag, Mention, https, www.something, something.com\n",
    "    pattern = re.compile(r\"(#[A-Za-z0-9]+|@[A-Za-z0-9]+|https?://\\S+|www\\.\\S+|\\S+\\.[a-z]+|RT @)\")\n",
    "    text = pattern.sub('', text)\n",
    "    text = \" \".join(text.split())\n",
    "    \n",
    "    \n",
    "    #Remove contractions and multiple sequential sentences\n",
    "    text = re.sub(r\"can\\'t\", \"can not\", text)\n",
    "    text = re.sub(r\"won\\'t\", \"will not\", text)\n",
    "    text = re.sub(r\"n\\'t\", \" not\", text)\n",
    "    text = re.sub(r\"\\'re\", \" are\", text)\n",
    "    text = re.sub(r\"\\'s\", \" is\", text)\n",
    "    text = re.sub(r\"\\'d\", \" would\", text)\n",
    "    text = re.sub(r\"\\'ll\", \" will\", text)\n",
    "    text = re.sub(r\"\\'t\", \" not\", text)\n",
    "    text = re.sub(r\"\\'ve\", \" have\", text)\n",
    "    text = re.sub(r\"\\'m\", \" am\", text)\n",
    "    text = re.sub(\"\\s\\s+\" , \" \", text)\n",
    "    \n",
    "    # Make all text lowercase\n",
    "    text = text.lower()\n",
    "    \n",
    "    # Stemming word\n",
    "    #tokenized = nltk.word_tokenize(text)\n",
    "    text =  ' '.join([ps.stem(word) for word in text.split()])\n",
    "    # \" \".join([lemma.lemmatize(word) for word in text.split()])\n",
    "    \n",
    "    # \n",
    "    \n",
    "    # Remove Punctuation\n",
    "    remove_punc = re.compile(r\"[%s]\" % re.escape(string.punctuation))\n",
    "    text = remove_punc.sub('', text)\n",
    "    \n",
    "    # Remove stopwords\n",
    "    text = \" \".join([word for word in str(text).split() if word not in stop_words])\n",
    "    \n",
    "    # Convert emoji to word\n",
    "    emoji = demoji.findall(text)\n",
    "    for emot in emoji:\n",
    "        text = re.sub(r\"(%s)\" % (emot), \"_\".join(emoji[emot].split()), text)\n",
    "        \n",
    "    return text   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "976559c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route('/')\n",
    "def home():\n",
    "    return render_template('home.html')\n",
    "\n",
    "@app.route('/predict',methods=['POST'])\n",
    "def predict():\n",
    "    df= pd.read_csv(\"cyberbullying_tweets.csv\")\n",
    "    # Features and Labels\n",
    "    df = df[df[\"cyberbullying_type\"]!=\"other_cyberbullying\"]\n",
    "    #df = pd.get_dummies(data, columns=['cyberbullying_type'])\n",
    "    #data_upd.head()\n",
    "    df['label'] = df['cyberbullying_type'].replace({'religion':0,'age':1,'ethnicity':2,'gender':3, 'not_cyberbullying':4})\n",
    "    \n",
    "    texts_clean = []\n",
    "    for text in df.tweet_text:\n",
    "        texts_clean.append(clean_text(text))\n",
    "    df['text_clean'] = texts_clean\n",
    "    \n",
    "    x_train, x_test, y_train, y_test = train_test_split(df['text_clean'], df['label'], test_size=0.20, random_state=42)\n",
    "    cv = CountVectorizer(ngram_range = (1,2))\n",
    "    x_train_cv =  cv.fit_transform(x_train)\n",
    "    x_test_cv = cv.transform(x_test)\n",
    "    \n",
    "    #Apply tf-idf tranformation to the bow\n",
    "    tf_transformer = TfidfTransformer(use_idf=True).fit(x_train_cv)\n",
    "    x_train_tf = tf_transformer.transform(x_train_cv)\n",
    "    x_test_tf = tf_transformer.transform(x_test_cv)\n",
    "\n",
    "    #Use Random forest classifier \n",
    "    rf = RandomForestClassifier(random_state=seed)\n",
    "    rf_model = rf.fit(x_train_tf,y_train)\n",
    "\n",
    "    #Alternative Usage of Saved Model\n",
    "    #joblib.dump(clf, 'RF_tweet_classifier.pkl')\n",
    "    #RF_tweet_classifier = open('RF_tweet_classifier.pkl','rb')\n",
    "    #clf = joblib.load(RF_tweet_classifier)\n",
    "\n",
    "    if request.method == 'POST':\n",
    "        message = request.form['message']\n",
    "        data = [message]\n",
    "        vect =  cv.fit_transform(data).toarray()\n",
    "        #vect = tf_transformer.transform(vect)\n",
    "        \n",
    "        \n",
    "    my_prediction = rf_model.predict(vect)\n",
    "    return render_template('result.html',prediction = my_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0e4a5317",
   "metadata": {},
   "outputs": [],
   "source": [
    "df= pd.read_csv(\"cyberbullying_tweets.csv\")\n",
    "df = df[df[\"cyberbullying_type\"]!=\"other_cyberbullying\"]\n",
    "texts_clean = []\n",
    "for text in df.tweet_text:\n",
    "    texts_clean.append(clean_text(text))\n",
    "df['text_clean'] = texts_clean\n",
    "df['label'] = df['cyberbullying_type'].replace({'religion':0,'age':1,'ethnicity':2,'gender':3, 'not_cyberbullying':4})\n",
    "    \n",
    "x_train, x_test, y_train, y_test = train_test_split(df['text_clean'], df['label'], test_size=0.20, random_state=42)\n",
    "cv = CountVectorizer(ngram_range = (1,2))\n",
    "x_train_cv =  cv.fit_transform(x_train)\n",
    "x_test_cv = cv.transform(x_test)\n",
    "   #Apply tf-idf tranformation to the bow\n",
    "tf_transformer = TfidfTransformer(use_idf=True).fit(x_train_cv)\n",
    "x_train_tf = tf_transformer.transform(x_train_cv)\n",
    "x_test_tf = tf_transformer.transform(x_test_cv)\n",
    "\n",
    "    #Use Random forest classifier \n",
    "rf = RandomForestClassifier(random_state=seed)\n",
    "rf_model = rf.fit(x_train_tf,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55b58527",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8e293a00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: This is a development server. Do not use it in a production deployment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [13/Mar/2022 04:19:55] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [13/Mar/2022 04:19:55] \"\u001b[33mGET /static/css/styles.css HTTP/1.1\u001b[0m\" 404 -\n",
      "[2022-03-13 04:21:16,382] ERROR in app: Exception on /predict [POST]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\gunja\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 3080, in get_loc\n",
      "    return self._engine.get_loc(casted_key)\n",
      "  File \"pandas\\_libs\\index.pyx\", line 70, in pandas._libs.index.IndexEngine.get_loc\n",
      "  File \"pandas\\_libs\\index.pyx\", line 101, in pandas._libs.index.IndexEngine.get_loc\n",
      "  File \"pandas\\_libs\\hashtable_class_helper.pxi\", line 4554, in pandas._libs.hashtable.PyObjectHashTable.get_item\n",
      "  File \"pandas\\_libs\\hashtable_class_helper.pxi\", line 4562, in pandas._libs.hashtable.PyObjectHashTable.get_item\n",
      "KeyError: 'label'\n",
      "\n",
      "The above exception was the direct cause of the following exception:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\gunja\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\gunja\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"C:\\Users\\gunja\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"C:\\Users\\gunja\\anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"C:\\Users\\gunja\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"C:\\Users\\gunja\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"<ipython-input-8-6884901f8774>\", line 19, in predict\n",
      "    x_train, x_test, y_train, y_test = train_test_split(df['text_clean'], df['label'], test_size=0.20, random_state=42)\n",
      "  File \"C:\\Users\\gunja\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\", line 3024, in __getitem__\n",
      "    indexer = self.columns.get_loc(key)\n",
      "  File \"C:\\Users\\gunja\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 3082, in get_loc\n",
      "    raise KeyError(key) from err\n",
      "KeyError: 'label'\n",
      "127.0.0.1 - - [13/Mar/2022 04:21:16] \"\u001b[35m\u001b[1mPOST /predict HTTP/1.1\u001b[0m\" 500 -\n"
     ]
    }
   ],
   "source": [
    "app.run(debug=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eadedc20",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
